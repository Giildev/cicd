name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del código desde el repositorio
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Configurar Docker Buildx para construir imágenes Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Usa la última versión

      # Paso 3: Iniciar sesión en Docker Hub usando los secrets de GitHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2  # Usa la última versión
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Secret para el nombre de usuario
          password: ${{ secrets.DOCKER_PASSWORD }}  # Secret para la contraseña

      # Paso 4: Construir y subir la imagen Docker a Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v2  # Usa la última versión
        with:
          push: true  # Indica que debe subir la imagen a Docker Hub
          tags: ${{ secrets.DOCKER_USERNAME }}/myapp:latest  # Etiqueta (tag) de la imagen

  # Segundo trabajo: Desplegar la aplicación en el servidor de producción
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Este trabajo se ejecuta después del build

    steps:
      # Conectarse al servidor por SSH y ejecutar los comandos de despliegue
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}  # IP del servidor
          username: ${{ secrets.SSH_USER }}  # Usuario SSH
          key: ${{ secrets.SSH_PRIVATE_KEY }}  # Clave privada SSH
          script: |
            # Actualizar y reiniciar la aplicación Docker en el servidor
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest  # Descargar la última imagen desde Docker Hub
            docker stop myapp || true  # Detener el contenedor si ya está corriendo
            docker rm myapp || true  # Eliminar el contenedor si ya existe
            docker run -d --name myapp -p 80:3000 ${{ secrets.DOCKER_USERNAME }}/myapp:latest  # Correr el nuevo contenedor en el puerto 80

